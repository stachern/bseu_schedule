# Extracted and modified version of
# https://github.com/stachern/bseu_schedule/blob/51b28dd1f2abc51df4c3d7193d320b00b9680e4e/lib/gdata/gauth.py


"""
The following are helper functions which are used to save and load tokens
in the App Engine datastore. These should only be used if you are using
these helpers within App Engine:

ae_save
ae_load
"""


import urllib

from google.appengine.ext import db
from google.appengine.api import memcache


class Token(db.Model):
    """Datastore Model which stores a serialized token."""
    t = db.BlobProperty()


def _token_to_blob(token):
    """Serializes the token string as a string for storage in a datastore.

    Args:
        token: A token string.

    Returns:
        A string represenging this token. The string can be converted back into
        an equivalent token string using _token_from_blob.
    """
    return urllib.quote_plus(token or '')


def _set_token(unique_key, token_str):
    """Saves the serialized auth token in the datastore.

    The token is also stored in memcache to speed up retrieval on a cache hit.

    Args:
        unique_key: The unique name for this token as a string. It is up to your
            code to ensure that this token value is unique in your application.
            Previous values will be silently overwritten.
        token_str: A serialized token as a string. I expect that this string
            will be generated by _token_to_blob.

    Returns:
        True if the token was stored sucessfully, False if the token could not be
        safely cached (if an old value could not be cleared). If the token was
        set in memcache, but not in the datastore, this function will return None.
        However, in that situation an exception will likely be raised.

    Raises:
        Datastore exceptions may be raised from the App Engine SDK in the event of
        failure, e.g.:

        BadValueError: Property t must be convertible to a Blob instance
                      (Blob() argument should be str instance, not unicode)
    """
    # First try to save in memcache.
    result = memcache.set(unique_key, token_str)
    # If memcache fails to save the value, clear the cached value.
    if not result:
        result = memcache.delete(unique_key)
        # If we could not clear the cached value for this token, refuse to save.
        if result == 0:
            return False
    # Save to the datastore.
    if Token(key_name=unique_key, t=token_str).put():
        return True
    return None


def ae_save(token, token_key):
    """Stores a token in the App Engine datastore.

    Recommended usage is to associate the token with the current_user.
    If a user is signed in to the app using the App Engine users API, you
    can use

        ae_save(some_token, users.get_current_user().user_id())

    If you are not using the Users API you are free to choose whatever
    string you would like for a token_string.

    Args:
        token: a token string.
        token_key: str A unique identifier to be used when you want to retrieve
                the token. If the user is signed in to App Engine using the
                users API, I recommend using the user ID for the token_key:

                users.get_current_user().user_id()
    """
    # Convert unicode string to byte string
    # Otherwise, _set_token raises:
    #   BadValueError: Property t must be convertible to a Blob instance (Blob() argument should be str instance, not unicode)
    token = token.encode('utf-8')
    return _set_token(token_key, _token_to_blob(token))
