# Extracted and modified version of
# https://github.com/stachern/bseu_schedule/blob/51b28dd1f2abc51df4c3d7193d320b00b9680e4e/lib/gdata/gauth.py


"""
The following are helper functions which are used to save and load tokens
in the App Engine datastore. These should only be used if you are using
these helpers within App Engine:

ae_save
ae_load
"""


import urllib

from google.appengine.ext import db
from google.appengine.api import memcache


class Token(db.Model):
    """Datastore Model which stores a serialized token."""
    t = db.BlobProperty()


def _token_to_blob(token):
    """Serializes the token string as a string for storage in a datastore.

    Args:
        token: A token string.

    Returns:
        A string represenging this token. The string can be converted back into
        an equivalent token string using _token_from_blob.
    """
    return urllib.quote_plus(token or '')

def _token_from_blob(blob):
    """Deserializes a token string from the datastore back into a token string.

    Args:
        blob: string created by _token_to_blob.

    Returns:
        A new token string deserialized from the blob string.
    """
    return urllib.unquote_plus(blob) or None

def _set_token(unique_key, token_str):
    """Saves the serialized auth token in the datastore.

    The token is also stored in memcache to speed up retrieval on a cache hit.

    Args:
        unique_key: The unique name for this token as a string. It is up to your
            code to ensure that this token value is unique in your application.
            Previous values will be silently overwritten.
        token_str: A serialized token as a string. I expect that this string
            will be generated by _token_to_blob.

    Returns:
        True if the token was stored sucessfully, False if the token could not be
        safely cached (if an old value could not be cleared). If the token was
        set in memcache, but not in the datastore, this function will return None.
        However, in that situation an exception will likely be raised.

    Raises:
        Datastore exceptions may be raised from the App Engine SDK in the event of
        failure, e.g.:

        BadValueError: Property t must be convertible to a Blob instance
                      (Blob() argument should be str instance, not unicode)
    """
    # First try to save in memcache.
    result = memcache.set(unique_key, token_str)
    # If memcache fails to save the value, clear the cached value.
    if not result:
        result = memcache.delete(unique_key)
        # If we could not clear the cached value for this token, refuse to save.
        if result == 0:
            return False
    # Save to the datastore.
    if Token(key_name=unique_key, t=token_str).put():
        return True
    return None

def _get_token(unique_key):
    """Searches for a stored token with the desired key.

    Checks memcache and then the datastore if required.

    Args:
        unique_key: str which uniquely identifies the desired token.

    Returns:
        A string encoding the token data. Use _token_from_blob to convert back
        into a usable token string. None if the token was not found in memcache
        or the datastore.
    """
    token_string = memcache.get(unique_key)
    if token_string is None:
        # The token wasn't in memcache, so look in the datastore.
        token = Token.get_by_key_name(unique_key)
        if token is None:
            return None
        return token.t
    return token_string


def ae_save(token, token_key):
    """Stores a token in the App Engine datastore.

    Recommended usage is to associate the token with the current_user.
    If a user is signed in to the app using the App Engine users API, you
    can use

        ae_save(some_token, users.get_current_user().user_id())

    If you are not using the Users API you are free to choose whatever
    string you would like for a token_string.

    Args:
        token: a token string.
        token_key: str A unique identifier to be used when you want to retrieve
                the token. If the user is signed in to App Engine using the
                users API, I recommend using the user ID for the token_key:

                users.get_current_user().user_id()
    """
    # Convert unicode string to byte string
    # Otherwise, _set_token raises:
    #   BadValueError: Property t must be convertible to a Blob instance (Blob() argument should be str instance, not unicode)
    token = token.encode('utf-8')
    return _set_token(token_key, _token_to_blob(token))


def ae_load(token_key):
    """Retrieves a token string from the App Engine datastore.

    This is a convenience method for using the app with App Engine.
    See also ae_save.

    Args:
        token_key: str The unique key associated with the desired token when it
                was saved using ae_save.

    Returns:
        A token string if there was a token associated with the token_key or None
        if the key could not be found.
    """
    token_string = _get_token(token_key)
    if token_string is not None:
        return _token_from_blob(token_string).decode('utf-8')
    else:
        return None
